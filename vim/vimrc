"          __
"  __  __ /\_\    ___ ___   _ __   ___
" /\ \/\ \\/\ \ /' __` __`\/\`'__\/'___\
" \ \ \_/ |\ \ \/\ \/\ \/\ \ \ \//\ \__/
"  \ \___/  \ \_\ \_\ \_\ \_\ \_\\ \____\
"   \/__/    \/_/\/_/\/_/\/_/\/_/ \/____/

let g:mapleader = "\<Space>" " Leader„Ç≠„Éº„Çí„Çπ„Éö„Éº„Çπ„Å´Ë®≠ÂÆö

" „Éó„É©„Ç∞„Ç§„É≥Ë®≠ÂÆö {{{
" {{{ dein.vim settings
if has('nvim')
  let s:dein_dir = expand('~/.cache/dein/nvim')
else
  let s:dein_dir = expand('~/.cache/dein/vim')
endif
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . s:dein_repo_dir
endif

if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)

  call dein#add('kana/vim-operator-replace')
  call dein#add('kana/vim-operator-user')

  " only vim
  if has("nvim")
    call dein#add('neoclide/coc.nvim', {'rev': 'release'})
  else
    call dein#add('prabirshrestha/vim-lsp')
    call dein#add('mattn/vim-lsp-settings', {'merged': 0})
  endif

  " syntax
  call dein#add('cespare/vim-toml')
  call dein#add('dag/vim-fish')
  call dein#add('jparise/vim-graphql')
  call dein#add('plasticboy/vim-markdown')
  call dein#add('tokorom/vim-review')

  " colorscheme
  call dein#add('cocopon/iceberg.vim')

  " for development
  call dein#add('t9md/vim-choosewin')
  call dein#add('Shougo/dein.vim')
  call dein#add('andymass/vim-matchup')
  call dein#add('cohama/lexima.vim')
  call dein#add('fatih/vim-go')
  call dein#add('junegunn/fzf', {'merged': 0})
  call dein#add('junegunn/fzf.vim', {'depends': 'fzf'})
  call dein#add('kshenoy/vim-signature')
  call dein#add('lambdalisue/fern.vim')
  call dein#add('lambdalisue/gina.vim')
  call dein#add('markonm/traces.vim')
  call dein#add('mattn/emmet-vim')
  call dein#add('mattn/sonictemplate-vim')
  call dein#add('mattn/vim-goimports')
  call dein#add('simeji/winresizer')
  call dein#add('skanehira/code2img.vim')
  call dein#add('skanehira/getpr.vim')
  call dein#add('skanehira/translate.vim')
  call dein#add('thinca/vim-quickrun')
  call dein#add('tyru/open-browser-github.vim')
  call dein#add('tyru/open-browser.vim')
  call dein#add('mbbill/undotree')
  call dein#add('rust-lang/rust.vim')

  " for documentation
  call dein#add('glidenote/memolist.vim')
  call dein#add('godlygeek/tabular')
  call dein#add('gyim/vim-boxdraw')
  call dein#add('mattn/vim-maketable')
  call dein#add('previm/previm')
  call dein#add('shinespark/vim-list2tree')
  call dein#add('skanehira/gyazo.vim')
  call dein#add('skanehira/preview-uml.vim')
  call dein#add('hashivim/vim-terraform')
  call dein#add('tyru/eskk.vim')
  call dein#add('tyru/skkdict.vim')
  call dein#add('vim-jp/vimdoc-ja')

  " for develop vim/neovim plugin
  call dein#add('LeafCage/vimhelpgenerator')
  call dein#add('lambdalisue/vital-Whisky', {'merged': 0})
  call dein#add('tweekmonster/helpful.vim')
  call dein#add('vim-jp/vital.vim', {'merged': 0})

  " other
  call dein#add('basyura/TweetVim')
  call dein#add('basyura/twibill.vim')
  call dein#add('itchyny/lightline.vim')
  call dein#add('itchyny/vim-winfix')

  " end settings
  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

function! DeinClean() abort
  let s:removed_plugins = dein#check_clean()
  if len(s:removed_plugins) > 0
    call map(s:removed_plugins, "delete(v:val, 'rf')")
    call dein#recache_runtimepath()
  endif
endfunction

command! CleanPlugins call DeinClean()
" }}}

" {{{ translate.vim
nmap gr <Plug>(Translate)
vmap gt <Plug>(VTranslate)
" }}}

" {{{ fern.vim
function! s:fern_init() abort
  nnoremap <buffer> <silent> q :q<CR>
  map <buffer> <silent> <C-x> <Plug>(fern-action-open:split)
  map <buffer> <silent> <C-v> <Plug>(fern-action-open:vsplit)
  map <buffer> <silent> <C-t> <Plug>(fern-action-tcd)
endfunction

let g:fern#drawer_keep = 1
let g:fern#default_hidden = 1
let g:fern#default_exclude = '.git$'

augroup fern-settings
  au!
  au FileType fern call s:fern_init()
augroup END

nnoremap <silent> <Leader>f :Fern . -drawer<CR>
" }}}

" {{{ gina.vim
call gina#custom#mapping#nmap(
      \ 'status', 'gp',
      \ ':<C-u>terminal git push<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ 'status', 'gP',
      \ ':<C-u>terminal git pull<CR>',
      \ {'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ 'status', 'gr',
      \ ':<C-u>terminal gh pr create<CR>',
      \ {'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ 'status', 'gl',
      \ ':<C-u>terminal git pull<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ 'status', 'cm',
      \ ':<C-u>Gina commit<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ 'status', 'ca',
      \ ':<C-u>Gina commit --amend<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ 'status', 'dp',
      \ '<Plug>(gina-patch-oneside-tab)',
      \ {'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ 'status', 'ga',
      \ '--',
      \ {'silent': 1},
      \)
call gina#custom#mapping#vmap(
      \ 'status', 'ga',
      \ '--',
      \ {'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ 'log', 'dd',
      \ '<Plug>(gina-changes-of)',
      \ {'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ 'branch', 'n',
      \ '<Plug>(gina-branch-new)',
      \ {'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ 'branch', 'D',
      \ '<Plug>(gina-branch-delete)',
      \ {'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ '/.*', 'q',
      \ ':<C-u>bw!<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
call gina#custom#mapping#nmap(
      \ 'blame', '<C-o>',
      \ ':<C-u>call GinaOpenPR()<CR>',
      \ {'silent': 1},
      \)
call gina#custom#command#option('log', '--opener', 'new')
call gina#custom#command#option('status', '--opener', 'new')
call gina#custom#command#option('branch', '--opener', 'new')

let s:open = 'open'
if has('linux')
  let s:open = 'xdg-open'
elseif has('win64')
  let s:open = 'cmd /c start'
endif

function! GinaOpenPR() abort
  let can = gina#action#candidates()
  let url = trim(system(printf('%s %s', 'getpr', can[0].rev)))
  call system(printf('%s %s', s:open, url))
endfunction

nnoremap <silent> gs :Gina status -s<CR>
nnoremap <silent> gl :Gina log<CR>
nnoremap <silent> gm :Gina blame<CR>
nnoremap <silent> gb :Gina branch<CR>
nnoremap <silent> gu :Gina browse --exact --yank :<CR>
vnoremap <silent> gu :Gina browse --exact --yank :<CR>
" }}}

" {{{ quickrun.vim
nnoremap <Leader>q :QuickRun -runner terminal<CR>
let g:quickrun_config = {
      \ 'typescript': {
      \ 'command': 'deno',
      \ 'cmdopt': '--no-check --unstable --allow-all',
      \ 'exec': ['NO_COLOR=1 %C run %o %s'],
      \ 'type': 'typescript',
      \ },
      \ 'deno_test': {
      \ 'command': 'deno',
      \ 'cmdopt': 'test --no-check --unstable --allow-all',
      \ 'tempfile': '%{printf("%s_test.ts", tempname())}',
      \ 'exec': ['NO_COLOR=1 %C test %o %s'],
      \ 'type': 'typescript',
      \ },
      \ 'deno_terminal': {
      \ 'command': 'deno',
      \ 'cmdopt': '--no-check --unstable --allow-all',
      \ 'exec': ['%C run %o %s'],
      \ 'type': 'typescript',
      \ 'runner': 'terminal',
      \ },
      \ 'go_bench': {
      \ 'command': 'go',
      \ 'tempfile': '%{printf("%s_test.go", tempname())}',
      \ 'exec': ['%C test -bench . -benchmem'],
      \ 'type': 'go',
      \ 'runner': 'terminal',
      \ },
      \ 'go_test': {
      \ 'command': 'go',
      \ 'tempfile': '%{printf("%s_test.go", tempname())}',
      \ 'exec': ['%C test -v . '],
      \ 'type': 'go',
      \ },
      \ }
" }}}

" {{{ code2img.vim
let g:code2img_line_number = 0
map gi <Plug>(Code2img)
xmap gi <Plug>(Code2img)
" }}}

" vim-go settings {{{
let g:go_fmt_autosave = 0
let g:go_imports_autosave = 0
let g:go_fmt_command = 'goimports' " „Éï„Ç°„Ç§„É´‰øùÂ≠òÊôÇgo import„ÇíÂÆüË°å„Åô„Çã
let g:go_gopls_enabled = 0 " gopls„ÇíÊúâÂäπÂåñ
let g:go_def_mapping_enabled = 0 " vim-lsp„Çí‰ΩøÁî®„Åô„Çã„ÅÆ„Åß„ÄÅvim-go„ÅÆ`Ctrl+]`„ÇíÁÑ°Âäπ„Å´„Åô„Çã
let g:go_template_autocreate = 0 " „ÉÜ„É≥„Éó„É¨„Éº„Éà‰ΩúÊàê„ÇíÁÑ°ÂäπÂåñ
let g:go_def_reuse_buffer = 1 " „Åô„Åß„Å´Èñã„ÅÑ„Å¶„ÅÑ„Çã„Éê„ÉÉ„Éï„Ç°„Å´ÂÆöÁæ©„Ç∏„É£„É≥„Éó„Åô„Çã
"let g:go_fold_enable = ['block', 'import', 'varconst', 'package_comment']
" }}}

" fzf settings {{{
let g:fzf_layout = { 'down': '50%' }
nnoremap <C-P> :Files<CR>
" }}}

" lsp settings {{{
" coc.nvim
if has("nvim")
  " GoTo code navigation.
  nmap <silent> <C-]> <Plug>(coc-definition)
  nmap <silent> <C-t> :<C-u>call CocActionAsync('jumpDefinition', 'vsplit')<CR>
  nmap <silent> <Leader>gi <Plug>(coc-implementation)
  nmap <silent> <Leader>gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  command! LspRename :call CocActionAsync('rename')
  command! LspReferences :call CocActionAsync('jumpReferences')
  command! LspFormat :call CocActionAsync('format')

  " use manual completion
  inoremap <silent><expr> <C-x><C-o> coc#refresh()

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  let g:coc_global_extensions = [
        \ 'coc-yaml',
        \ 'coc-vimlsp',
        \ 'coc-vetur',
        \ 'coc-tsserver',
        \ 'coc-sql',
        \ 'coc-sh',
        \ 'coc-rust-analyzer',
        \ 'coc-json',
        \ 'coc-deno',
        \ 'coc-eslint',
        \ 'coc-go',
        \ 'coc-spell-checker',
        \ ]

  call coc#config('diagnostic', {
        \ 'errorSign': 'ü¶ç',
        \ 'warningSign': 'üí©',
        \ })

  call coc#config('coc.preferences.formatOnType', 'true')
  call coc#config('coc.preferences.useQuickfixForLocations', 'true')
  " disable auto completion
  call coc#config('suggest.autoTrigger', 'none')
  call coc#config('coc.preferences', {
        \ 'formatOnSaveFiletypes': [
          \ 'css',
          \ 'js',
          \ 'javascriptreact',
          \ 'ts',
          \ 'typescriptreact',
          \ 'typescript',
          \ 'html',
          \ 'scss',
          \ 'sass',
          \ 'json',
          \ 'rust',
          \ 'sql',
          \ 'bash',
          \]})

  call coc#config('languageserver', {
        \ 'terraform': {
          \ 'command': 'terraform-ls',
          \ 'trace.server': 'verbose',
          \ 'filetypes': ['tf', 'terraform'],
          \ 'args': ['serve'],
        \ },
        \ 'efm': {
          \ 'command': 'efm-langserver',
          \ 'args': [],
          \ 'trace.server': 'verbose',
          \ 'filetypes': ['markdown']
          \ },
        \})
" vim-lsp
else
  let g:lsp_diagnostics_signs_error = {'text': 'ü¶ç'}
  let g:lsp_diagnostics_signs_warning = {'text': 'üçå'}
  if !has('nvim')
    let g:lsp_diagnostics_float_cursor = 1
  endif
  let g:lsp_log_file = ''

  nmap <Leader>ho <plug>(lsp-hover)
  nnoremap <silent> <C-]> :LspDefinition<CR>

  let g:lsp_settings = {
        \ 'gopls': {
        \  'workspace_config': {
        \    'usePlaceholders': v:true,
        \    'analyses': {
        \      'fillstruct': v:true,
        \    },
        \  },
        \  'initialization_options': {
        \    'usePlaceholders': v:true,
        \    'analyses': {
        \      'fillstruct': v:true,
        \    },
        \  },
        \ },
        \ 'eslint-language-server': {
        \   'allowlist': ['javascript', 'typescript', 'vue'],
        \ },
        \ 'efm-langserver': {
        \   'disabled': 0,
        \   'allowlist': ['markdown'],
        \  }
        \}

  let g:lsp_settings_filetype_typescript = ['typescript-language-server', 'eslint-language-server', 'deno']

  function! s:on_lsp_buffer_enabled() abort
    setlocal completeopt=menu
    setlocal omnifunc=lsp#complete
  endfunction

  function! s:autofmt() abort
    if &ft == 'typescript'
      LspDocumentFormatSync
    endif
  endfunction

  augroup lsp_autofmt
    au!
    au BufWrite * call s:autofmt()
  augroup END

  augroup lsp_install
    au!
    au User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END

  "augroup vim_lsp_golangci_lint_langserver
  "  au!
  "  autocmd User lsp_setup call lsp#register_server({
  "      \ 'name': 'golangci-lint-langserver',
  "      \ 'cmd': {server_info->['golangci-lint-langserver']},
  "      \ 'initialization_options': {'command': ['golangci-lint', 'run', 'json']},
  "      \ 'allowlist': ['go'],
  "      \ })
  "augroup END
endif
" }}}

" vim-markdown {{{
let g:vim_markdown_folding_disabled = 1
" }}}

" emmet {{{
let g:user_emmet_install_global = 0
let g:user_emmet_settings = {
      \   'variables': {
      \     'lang' : 'ja'
      \   }
      \ }
let g:user_emmet_leader_key = '<C-g>'

augroup emmet
  au!
  au FileType vue,html,css EmmetInstall
  au FileType vue,html,css imap <buffer> <C-f> <plug>(emmet-expand-abbr)
augroup END
" }}}

" sonictemplate.vim {{{
let g:sonictemplate_vim_template_dir = ["~/.vim/template"]
let g:sonictemplate_author = 'skanehira'
let g:sonictemplate_license = 'MIT'
let g:sonictemplate_vim_template_dir = expand('~/.vim/sonictemplate')
imap <silent> <C-l> <plug>(sonictemplate-postfix)
" }}}

" vimhelpgenarator {{{
let g:vimhelpgenerator_version = ''
let g:vimhelpgenerator_author = 'Author: skanehira <sho19921005@gmail.com>'
let g:vimhelpgenerator_uri = 'https://github.com/skanehira/'
let g:vimhelpgenerator_defaultlanguage = 'en'
" }}}

" {{{ MemoList
let g:memolist_fzf = 1
" }}}

" {{{ docker.vim
let g:docker_use_tmux = 1
let g:docker_plugin_version_check = 0
" }}}

" {{{ preview.vim
let g:previm_open_cmd = 'open'
let g:previm_plantuml_imageprefix = 'http://localhost:8888/png/'
let g:previm_enable_realtime = 1
" }}}

" {{{ preview-markdown.vim
let g:preview_markdown_vertical = 1
let g:preview_markdown_auto_update = 1
" }}}

"{{{ gist-vim
let g:gist_post_private = 1
let g:gist_list_vsplit = 1
"}}}

" {{{ tweetvim
let g:tweetvim_display_time = 1
let g:tweetvim_open_buffer_cmd = 'tabnew'
nnoremap <silent> <Leader>th :<C-u>TweetVimHomeTimeline<CR>
nnoremap <silent> <Leader>ts :<C-u>TweetVimSay<CR>
" }}}

" {{{ gh.vim
let g:gh_open_issue_on_create = 1
function! s:gh_map_apply() abort
  if !exists('g:loaded_gh')
    return
  endif
  call gh#map#add('gh-buffer-issue-list', 'nmap', 'e', '<Plug>(gh_issue_edit)')
  call gh#map#add('gh-buffer-issue-list', 'nmap', 'gm', '<Plug>(gh_issue_open_comment)')
  call gh#map#add('gh-buffer-issue-list', 'nmap', 'y', '<Plug>(gh_issue_url_yank)')
  call gh#map#add('gh-buffer-issue-comment-list', 'nmap', 'n', '<Plug>(gh_issue_comment_new)')
  call gh#map#add('gh-buffer-issue-comment-list', 'nmap', 'e', '<Plug>(gh_issue_comment_edit)')
  call gh#map#add('gh-buffer-issue-edit', 'nmap', 'gm', '<Plug>(gh_issue_comment_open_on_issue)')
  call gh#map#add('gh-buffer-pull-list', 'nmap', 'y', '<Plug>(gh_pull_url_yank)')
  call gh#map#add('gh-buffer-project-list', 'nmap', 'y', '<Plug>(gh_project_url_yank)')
  call gh#map#add('gh-buffer-project-column-list', 'nmap', 'y', '<Plug>(gh_projects_card_url_yank)')
  call gh#map#add('gh-buffer-project-column-list', 'nmap', 'o', '<Plug>(gh_projects_card_open)')
  call gh#map#add('gh-buffer-action-list', 'nmap', 'o', '<Plug>(gh_actions_open_browser)')
  call gh#map#add('gh-buffer-action-list', 'nmap', 'y', '<Plug>(gh_actions_yank_url)')
  call gh#map#add('gh-buffer-gist-list', 'nmap', 'e', '<Plug>(gh_gist_edit_file)')
  call gh#map#add('gh-buffer-gist-list', 'nmap', 'y', '<Plug>(gh_gist_list_yank)')
  call gh#map#add('gh-buffer-bookmark-list', 'nmap', '<CR>', ':e <C-r>=getline(".")<CR><CR>')
endfunction

augroup gh-maps
  au!
  au VimEnter * call <SID>gh_map_apply()
augroup END

nnoremap <silent> gh :new gh://bookmarks<CR>
" }}}

" {{{ vim-operator-replace
if !has('mac') && !has('nvim')
  vmap p <Plug>(operator-replace)
endif
" }}}

" {{{ getpr.vim
map go <Plug>(getpr-open)
map gy <Plug>(getpr-yank)
" }}}

" {{{ gyazo.vim
let g:gyazo_insert_markdown_url = 1
nmap gup <Plug>(gyazo-upload)
" }}}

" {{{ vim-choosewin
nmap <C-f> <Plug>(choosewin)
" }}}

" {{{ lightline
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \ 'left': [ ['mode', 'paste'], ['readonly', 'branchName', 'filepath', 'modified'] ]
      \ },
      \ 'component_function':{
      \ 'filepath': 'FilePath',
      \ },
      \ }

function! FilePath()
  if winwidth(0) > 90
    return expand("%:s")
  else
    return expand("%:t")
  endif
endfunction
" }}}

" {{{ rust.vim
if !has("nvim")
  let g:rustfmt_autosave = 1
endif
" }}}

" {{{ command.vim
nmap c: <Plug>(command_buffer_open)
" }}}
" }}}

syntax enable " „Ç∑„É≥„Çø„ÉÉ„ÇØ„Çπ„ÇíÊúâÂäπ„Å´„Åô„Çã
filetype plugin indent on " „Éï„Ç°„Ç§„É´ÂΩ¢ÂºèÂà•„Éó„É©„Ç∞„Ç§„É≥„Å®„Ç§„É≥„Éá„É≥„Éà„ÇíÊúâÂäπ„Å´„Åô„Çã

" „Ç´„É©„Éº„Çπ„Ç≠„Éº„É†„Çí‰Ωø„ÅÜ {{{
colorscheme iceberg
" iceberg„ÅØ„Çø„Éº„Éü„Éä„É´„Çí16Ëâ≤„Å´Ë®≠ÂÆö„Åô„Çã„ÅÆ„ÇíÂõûÈÅø
if !has('nvim')
  augroup iceberg
    au!
    au ColorScheme * unlet g:terminal_ansi_colors
  augroup END
endif
set background=dark
"let g:tokyonight_disable_italic_comment = 1
"colorscheme tokyonight
" }}}

" „Ç™„Éó„Ç∑„Éß„É≥ {{{
set encoding=utf-8
set t_ut=
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis
set fileformats=unix,dos,mac
set belloff=all " „Éü„É•„Éº„Éà
set backspace=2 " „Éê„ÉÉ„ÇØ„Çπ„Éö„Éº„Çπ„Å®Ctrl+h„ÅßÂâäÈô§„ÇíÊúâÂäπ„Å´„Åô„Çã
set smartindent autoindent " ÊîπË°åÊôÇËá™Âãï„Ç§„É≥„Éá„É≥„Éà
set incsearch " „Ç§„É≥„ÇØ„É™„É°„É≥„Éà„Çµ„Éº„ÉÅ„ÇíÊúâÂäπ„Å´„Åô„Çã
set ignorecase " Ê§úÁ¥¢ÊôÇÂ§ßÊñáÂ≠óÂ∞èÊñáÂ≠ó„ÇíÂå∫Âà•„Åó„Å™„ÅÑ
set smartcase " Ê§úÁ¥¢ÊôÇ„Å´Â§ßÊñáÂ≠ó„ÇíÂÖ•Âäõ„Åó„ÅüÂ†¥Âêàignorecase„ÅåÁÑ°Âäπ„Å´„Å™„Çã
set hlsearch " „Éè„Ç§„É©„Ç§„Éà„Çµ„Éº„ÉÅ„ÇíÊúâÂäπ„Å´„Åô„Çã
set undolevels=1000 " undo„Åß„Åç„ÇãÊúÄÂ§ßÊï∞
set scrolloff=100 " „Ç´„Éº„ÇΩ„É´„ÅåÂ∏∏„Å´‰∏≠Â§Æ„Å´Êù•„Çã„Çà„ÅÜ„Å´„Åô„Çã
set lazyredraw ttyfast " „Éû„ÇØ„É≠„ÅßÂäπÊûúÁô∫ÊèÆ
set synmaxcol=256 "‰∏ÄË°å„ÅåÈï∑„ÅÑ„Éï„Ç°„Ç§„É´„Çísyntax„ÇíÂà∂Âæ°„Åô„Çã„Åì„Å®„ÅßËªΩ„Åè„Åô„Çã
set cursorline " „Ç´„Éº„ÇΩ„É´„É©„Ç§„É≥„ÇíË°®Á§∫„Åô„Çã
set wildmenu " wildmenu„ÇíÊúâÂäπ„Å´„Åô„Çã
set virtualedit=block " Áü©ÂΩ¢ÈÅ∏ÊäûÊôÇ„Å´ÊñáÂ≠ó„ÅÆÁÑ°„ÅÑ„Å®„Åì„Çç„Åæ„ÅßÈÅ∏ÊäûÁØÑÂõ≤„ÇíÂ∫É„Åí„Çã
set helplang=ja " „Éò„É´„Éó„ÅÆË®ÄË™û„ÇíÊó•Êú¨Ë™ûÂÑ™ÂÖà„Å´„Åô„Çã
set autowrite " ‰ªñ„ÅÆ„Éê„ÉÉ„Éï„Ç°„Å´ÁßªÂãï„Åô„ÇãÊôÇ„Å´Ëá™Âãï‰øùÂ≠ò
set noswapfile " swap„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åó„Å™„ÅÑ
set showtabline=2 " „Çø„Éñ„ÇíË°®Á§∫„Åó„Å™„ÅÑ
set noshowmode
set laststatus=2
set list listchars=tab:¬ª-,trail:-,extends:¬ª,precedes:¬´,nbsp:% " list„ÅÆË®≠ÂÆö
if !has('nvim')
  set nrformats+=unsigned " Êï∞ÂÄ§„ÅÆÂä†Ê∏õÁÆó„ÇíËÄÉÊÖÆ
  set cursorlineopt=line " Ë°å„ÅÆ„Åø„Éè„Ç§„É©„Ç§„Éà
  set sessionoptions=blank,buffers,curdir,folds,help,tabpages,winsize,terminal " „Çª„ÉÉ„Ç∑„Éß„É≥„Åß‰øùÂ≠ò„Åô„ÇãÂØæË±°
endif
if has("mac") | set clipboard+=unnamed | else | set clipboard^=unnamedplus | endif " „ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„ÇíÂÖ±Êúâ
set diffopt=vertical

" Êã°ÂºµÂ≠ê„Åî„Å®„ÅÆ„Ç§„É≥„Éá„É≥„ÉàË®≠ÂÆö {{{
set tabstop=2 shiftwidth=2 softtabstop=2

augroup fileTypeIndent
  au!
  au FileType go setlocal tabstop=4 shiftwidth=4
  au FileType vim setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  au FileType php setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  au FileType html setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  au FileType javascript setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  au FileType typescript setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  au FileType vue  setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  au FileType yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  au FileType json setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  au FileType sh setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  au FileType fish setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
  au FileType rust setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab
  au FileType markdown setlocal tabstop=2 shiftwidth=2
augroup END
" }}}

" {{{ „Ç∑„É≥„Çø„ÉÉ„ÇØ„Çπ„Çí„ÇØ„É™„Ç¢
augroup fileTypeSyntaxClear
  au!
  au FileType go syntax clear
  au FileType vim syntax clear
  au FileType html syntax clear
  au FileType javascript syntax clear
  au FileType typescript syntax clear
  au FileType vue  syntax clear
augroup END
" }}}

" grep„Åó„ÅüÁµêÊûú„Çíquickfix„Å´Ë°®Á§∫„Åô„Çã {{{
augroup grepwindow
  au!
  au QuickFixCmdPost *grep* cwindow
augroup END
" }}}

" „Ç´„Éº„ÇΩ„É´„É©„Ç§„É≥„ÅÆ‰ΩçÁΩÆ„Çí‰øùÂ≠ò„Åô„Çã {{{
augroup cursorlineRestore
  au!
  au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g'\"" |
        \ endif
augroup END
" }}}

" undo„ÅÆ‰øùÂ≠òÂÖà {{{
if has('persistent_undo')
  let undo_path = expand('~/.vim/undo')
  " „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
  if !isdirectory(undo_path)
    call mkdir(undo_path, 'p')
  endif
  exe 'set undodir=' .. undo_path
  set undofile
endif
" }}}
" }}}

" „Ç≠„Éº„Éû„ÉÉ„Éó {{{

" ^„Å®0„Çí0„Å´Áµ±‰∏Ä
nnoremap <expr> 0 getline('.')[0 : col('.') - 2] =~# '^\s\+$' ? '0' : '^'

" *„Åß„Ç´„Éº„ÇΩ„É´„ÇíÁßªÂãï„Åó„Å™„ÅÑ„Çà„ÅÜ„Å´„Åô„Çã
noremap * *N

" „Éï„Ç°„Ç§„É´‰øùÂ≠ò„Å®ÁµÇ‰∫Ü
nnoremap <Leader>w :w<CR>

" Ê§úÁ¥¢
nnoremap <C-G><C-G> :Grep <C-R><C-W><CR>

" ÁΩÆÊèõ
nnoremap <Leader>re :%s;\<<C-R><C-W>\>;g<Left><Left>;

" „Éè„Ç§„É©„Ç§„Éà„ÇíÂâäÈô§„Åô„Çã
nnoremap <silent> <Esc><Esc> :nohlsearch<CR>

" vimrc„ÇíÈñã„Åè
nnoremap <Leader>. :new ~/.vimrc<CR>
nnoremap <Leader>s :exe "source" expand("%")<CR>

" „ÉÜ„Ç≠„Çπ„Éà„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Ç≠„Éº„Éû„ÉÉ„Éî„É≥„Ç∞ {{{
onoremap 8 i(
onoremap 2 i"
onoremap 7 i'
onoremap @ i`
onoremap [ i[
onoremap { i{

onoremap a8 a(
onoremap a2 a"
onoremap a7 a'
onoremap a@ a`
onoremap a[ a[
onoremap a{ a{

" visual
nnoremap v8 vi(
nnoremap v2 vi"
nnoremap v7 vi'
nnoremap v@ vi`
nnoremap v[ vi[
nnoremap v{ vi{

nnoremap va8 va(
nnoremap va2 va"
nnoremap va7 va'
nnoremap va@ va`
nnoremap va[ va[
nnoremap va{ va{
" }}}

" Ë°åÂÖàÈ†≠„Å®Ë°åÊú´
noremap H ^
noremap L g_

" „Çø„ÉñÂàá„ÇäÊõø„Åà
nnoremap <C-l> gt
nnoremap <C-h> gT

" „Çø„Éº„Éü„Éä„É´Èñ¢ÈÄ£ {{{
tnoremap <C-]> <C-\><C-n>
if has('nvim')
  nnoremap <Leader>tm :new term<CR>
  function! s:term_start(cmd) abort
    call termopen(a:cmd)
  endfunction
else
  nnoremap <Leader>tm :term<CR>
  function! s:term_start(cmd) abort
    let old = bufnr()
    exe printf('term ++curwin ++shell %s', a:cmd)
    exe "bw!" old
    nnoremap <buffer> <silent> <CR> :bw!<CR>
  endfunction
endif
nnoremap <Leader>ttm :tabnew term<CR>

function! s:termopen() abort
  let bufname = bufname()
  let parts = split(bufname, ' ')
  let cmd = &shell
  if len(parts) > 1
    " like :new term [command] [args]
    let cmd = join(parts[1:], " ")
  endif
  call s:term_start(cmd)
endfunction

if has('nvim')
  augroup neovim-terminal
    au!
    au TermOpen * startinsert
  augroup END
else
  set termwinkey=<C-]>
  " „Çø„Éº„Éü„Éä„É´„Éé„Éº„Éû„É´„É¢„Éº„Éâ
endif

augroup terminal
  au!
  au BufNewFile term* ++nested call s:termopen()
augroup END
" }}}

" ÊîπË°å
nnoremap <C-j> o<ESC>
nnoremap <C-k> O<ESC>
nnoremap o A<CR>

" EmacsÈ¢®„ÅÆ„Ç≠„Éº„Éû„ÉÉ„Éó
imap <C-h> <BS>
inoremap <C-k> <C-o>C
inoremap <silent> <C-f> <Right>
inoremap <silent> <C-b> <Left>
inoremap <silent> <C-e> <C-o>A
inoremap <silent> <C-a> <C-o>I

" C-v „Åß„Éö„Éº„Çπ„Éà
inoremap <expr> <C-v> printf('<C-r><C-o>%s', has('linux') \|\| has('unix') ? '+' : '*')
cnoremap <expr> <C-v> printf('<C-r><C-o>%s', has('linux') \|\| has('unix') ? '+' : '*')

" Âõ≤„ÅÜ
nnoremap <silent> gw[ cw``<Esc>P
vnoremap <silent> gw[ c``<Esc>P

" „Éò„É´„Éó
augroup help-mapping
  au!
  au FileType help nnoremap <buffer> <silent>q :bw!<CR>
augroup END
" }}}

" „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥„ÅßÂçòË™ûÁßªÂãï {{{
cnoremap <c-b> <Left>
cnoremap <c-f> <Right>
cnoremap <c-a> <Home>
" }}}

" Better <C-n>/<C-p> in Command {{{
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <Up> <C-p>
cnoremap <Down> <C-n>
" }}}

" {{{ „É™„Éù„Ç∏„Éà„É™„Å´ÁßªÂãï
function! s:cd_repo(shell, repo) abort
  exe 'lcd' trim(system('ghq root')) .. '/' .. a:repo
  pwd
endfunction

function! s:repo(cb) abort
  if executable('ghq') && exists('*fzf#run()') && executable('fzf')
    call fzf#run({
          \ 'source': systemlist('ghq list'),
          \ 'sink': a:cb,
          \ 'down': '40%'},
          \ )
  else
    echo "doesn't installed ghq or fzf.vim(require fzf)"
  endif
endfunction

command! Repo call s:repo(function('s:cd_repo', [&shell]))
" }}}

" {{{ „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏Âá∫Âäõ
function! s:echo_err(message) abort
  echohl ErrorMsg
  redraw
  echo a:message
  echohl None
endfunction
" }}}

" {{{ „Éá„Ç£„É¨„ÇØ„Éà„É™Ëá™ÂãïÁîüÊàê
function! s:auto_mkdir(dir)
  if !isdirectory(a:dir)
    call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
  endif
endfunction
augroup auto-mkdir
  au!
  au BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'))
augroup END
" }}}

" {{{ lazygit
nnoremap <silent> gp :call system('fish -c "tmuxpopup lazygit"')<CR>
" }}}

" {{{ golangci-lint
function! s:golangci(...) abort
  if !executable('golangci-lint')
    call s:echo_err('golangci-lint does not installed')
    return
  endif

  if a:0 > 0
    let opts = a:000
  else
    let opts = get(g:, 'golangci_opts', ['misspell', 'unparam', 'stylecheck',
          \ 'gosec', 'prealloc', 'gocritic', 'gomnd', 'unconvert'])
  endif

  if get(g:, 'golangci_disable_all', 0)
    let cmd = printf('golangci-lint run --disable-all --print-issued-lines=false --enable=%s', join(opts, ','))
  else
    let cmd = printf('golangci-lint run --print-issued-lines=false --enable=%s', join(opts, ','))
  endif
  cexpr system(cmd) | cw
endfunction
command! -nargs=* GolangCI call <SID>golangci(<f-args>)
" }}}

" {{{ grep
function! s:grep(word) abort
  let cmd = printf('ag -S %s', a:word)
  cgetexpr system(cmd) | cw
endfunction

command! -nargs=1 Grep call <SID>grep(<q-args>)
" }}}

" {{{ zenn
function! s:create_zenn_article(article_name) abort
  let date = strftime("%Y-%m-%d")
  let slug = date . "-" . a:article_name
  call system("npx zenn new:article --emoji ü¶ç --slug " . slug )
  let article_path = "articles/" . slug . ".md"
  exe "edit " . article_path
endfunction

command! -nargs=1 ZennCreateArticle call <SID>create_zenn_article(<f-args>)
" }}}

" {{{ goimports
augroup goimports
  function! s:goimports() abort
    let pos = getcurpos()
    %!goimports
    call setpos('.', pos)
  endfunction
  au!
  au! FileType go nnoremap <silent> <Leader>i :call <SID>goimports()<CR>
augroup END
" }}}

" {{{ preview swagger
function! s:swagger_preview(file) abort
  if !executable('spr')
    call s:echo_err('spr does not installed')
    return
  endif

  let s:swagger_preview_jobid = job_start(['spr', a:file])
endfunction

function! s:swagger_preview_stop() abort
  call job_stop(s:swagger_preview_jobid)
endfunction

command! -nargs=1 -complete=file SwaggerPreview call <SID>swagger_preview(<f-args>)
command! SwaggerPreviewStop call <SID>swagger_preview_stop()
" }}}

" vim: foldmethod=marker
