\(\S.*\)\.err$
	if err := {{$1}}; err != nil {
		{{_cursor_}}
	}

\(\S\+\)\.for\.\(\S\+\)$
	for _, {{$1}} := range {{$2}} {
		{{_cursor_}}
	}

\(\S\+\)\.str$
	type {{$1}} struct {
		{{_cursor_}}
	}

errn$
	if err != nil {
		{{_cursor_}}
	}

create\.file$
	file, err := os.Create({{_cursor_}})
	if err != nil {
		return err
	}
	defer file.Close()

open\.file$
	file, err := os.Open({{_cursor_}})
	if err != nil {
		return err
	}
	defer file.Close()

read\.file$
	b, err := ioutil.ReadFile({{_cursor_}})
	if err != nil {
		return err
	}

errf$
	if err != nil {
		log.Fatal(err)
	}
	{{_cursor_}}

return.err$
	if err != nil {
		return err
	}
	{{_cursor_}}

db\.open\.\(".*"\)\.\(".*"\)$
	db, err := sql.Open({{$1}}, {{$2}})
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()
	{{_cursor_}}

db\.query\.\(.*\)$
	rows, err := db.Query({{$1}})
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()
	{{_cursor_}}

json\.decode\.\(\S\+\)\.\(\S\+\)$
	if err := json.NewDecoder({{$1}}).Decode({{$2}}); err != nil {
		{{_cursor_}}
	}

json\.encode\.\(\S\+\)\.\(\S\+\)$
	if err := json.NewEncoder({{$1}}).Encode({{$2}}); err != nil {
		{{_cursor_}}
	}

logf\.\(\S\+\)$
	log.Fatal({{$1}})

printf\.\(\S\+\)$
	fmt.Printf("%#+v\n", {{$1}})

^main$
	package main
	
	func main() {
		{{_cursor_}}
	}

http\.server\.\(\S\+\)$
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		{{_cursor_}}
	})
	log.Println("start http server :{{$1}}")
	log.Fatal(http.ListenAndServe(":{{$1}}", nil))

http\.file$
	http.Handle("/", http.FileServer(http.Dir(".")))
	{{_cursor_}}

http\.handlerfunc\.\(\S\+\)$
	http.HandleFunc({{$1}}, func(w http.ResponseWriter, r *http.Request) {
		{{_cursor_}}
	}

\(\S\+\)\.map\.\(\S\+\)\.\(\S\+\)$
	{{$1}} := map[{{$2}}]{{$3}} {
		{{_cursor_}}
	}
	
\(\S\+\)\.append\.\(\S\+\)$
	{{$1}} = append({{$1}}, {{$2}})

http\.error
	http.Error(w, err.Error(), {{_cursor_}})

form\.file$
	file, header, err := r.FormFile("{{_cursor_}}")
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	defer file.Close()

mrand$
	rand.Seed(time.Now().UnixNano())
	n := rand.Intn({{_cursor_}})

crand$
	n, err := rand.Int(rand.Reader, big.NewInt({{_cursor_}}))
	if err != nil {
		log.Fatal(err)
	}
	i := n.Int64()

\(\S.*\)\.if$
	if {{$1}} {
		{{_cursor_}}
	}

\(\S\+\)\.len$
	if len({{$1}}) {{_cursor_}} {

	}

64\.encode$
	str := base64.StdEncoding.EncodeToString({{_cursor_}})

64\.decode$
	b, err := base64.StdEncoding.DecodeString({{_cursor_}})
	if err != nil {
		return err
	}

http\.post\.\(\S.*\)\.\(\S.*\)
	req, err := http.NewRequest(
		http.MethodPost,
		{{$1}},
		{{$2}},
	)
	if err != nil {
		return err
	}
	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	{{_cursor_}}

http\.get
	resp, err := http.Get({{_cursor_}})
	if err != nil {
		return err
	}
	defer resp.Body.Close()

slice\.insert\.\(\S.*\)
	func insert(a []{{$1}}, x {{$1}}, i int) []{{$1}} {
		return append(a[:i], append([]{{$1}}{x}, a[i:]...)...)
	}

f\.\(\S.*\)
	func {{$1}}({{_cursor_}}) {
	}

t\.Run$
	t.Run("{{_cursor_}}", func(t *testing.T) {
	})

test\.\(.*\)$
	func Test{{$1}}(t *testing.T) {
		{{_cursor_}}
	}

int\.\(.*\)$
	type interface {{$1}} {
		{{_cursor_}}
	}
