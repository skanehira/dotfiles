# enable prompt color
autoload -U colors && colors
export PROMPT="%{$fg[red]%}%n%{$reset_color%}@%{$fg[green]%}%m%{$fg_bold[yellow]%} %3~ %{$reset_color%}
$ "

# alias
alias lg=lazygit
alias gs="git status"
alias gl="git log"
alias ll="ls -la"
alias ls="lsd"
alias ll='lsd -la'
alias diff="delta"
alias k="kubectl"
alias d="docker compose"
alias v="nvim"
alias t="terraform"
alias crun="cargo run --quiet"
alias c="cargo"
alias g="git"
alias t="terraform"

# custom keybindings
bindkey -v
bindkey -M viins '\er' history-incremental-pattern-search-forward
bindkey -M viins '^?'  backward-delete-char
bindkey -M viins '^A'  beginning-of-line
bindkey -M viins '^B'  backward-char
bindkey -M viins '^D'  delete-char-or-list
bindkey -M viins '^E'  end-of-line
bindkey -M viins '^F'  forward-char
bindkey -M viins '^G'  send-break
bindkey -M viins '^H'  backward-delete-char
bindkey -M viins '^K'  kill-line
bindkey -M viins '^N'  down-line-or-history
bindkey -M viins '^P'  up-line-or-history
bindkey -M viins '^R'  history-incremental-pattern-search-backward
bindkey -M viins '^U'  backward-kill-line
bindkey -M viins '^W'  backward-kill-word
bindkey -M viins '^Y'  yank


case $( uname -s ) in
  Linux)
    . $HOME/.asdf/asdf.sh
    ;;
  Darwin)
    # enable auto completion
    autoload -Uz compinit && compinit

    # asdf settings
    local asdf="$(brew --prefix)/opt/asdf/libexec/asdf.sh"
    if [ -f $asdf ]; then
      . $asdf
    fi

    # add homebrew site-functions for completion
    fpath=($(brew --prefix)/share/zsh/site-functions "${fpath[@]}")

    # enable zsh-autosuggestions
    local suggest=$(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
    if [ -f $suggest ]; then
      source $suggest
    fi

    # colors: https://coderwall.com/p/pb1uzq/z-shell-colors
    #export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=009"
    #export ZSH_AUTOSUGGEST_STRATEGY=(completion history)
    ;;
esac

# fzf auto complete
command -v fzf > /dev/null 2>&1 && source <(fzf --zsh)

# k8s auto complete
[ -x "$(which kubectl)" ] && source <(kubectl completion zsh)

function ghq-fzf() {
  local src=$(ghq list | fzf --preview "bat --color=always --style=grid $(ghq root)/{}/README.*")
  if [ -n "$src" ]; then
    BUFFER="cd $(ghq root)/$src"
    zle accept-line
  fi
  zle -R -c
}
zle -N ghq-fzf
bindkey '^g^g' ghq-fzf

function tmuxpopup() {
  local width='90%'
  local height='90%'

  if [ -n "$1" ];then
    tmux popup -d '#{pane_current_path}' -xC -yC -w$width -h$height -E $1
    return
  fi

  local name=$(tmux display-message -p -F "#{session_name}")
  if [[ $name =~ 'popup' ]];
  then
    tmux detach-client
  else
    tmux popup -d '#{pane_current_path}' -xC -yC -w$width -h$height -E "tmux new -A -s popup"
  fi
}
zle -N tmuxpopup

gss() {
  local in_zle=0 saved_buffer saved_cursor
  if [[ -n $WIDGET ]]; then
    in_zle=1
    saved_buffer=$BUFFER
    saved_cursor=$CURSOR
    zle -I
  fi

  local branch
  branch=$(
    git for-each-ref --sort=-committerdate \
      --format='%(refname:short)' refs/heads refs/remotes \
    | grep -vE '^HEAD$' \
    | fzf --height=40% --reverse --prompt='branch> ' \
          --preview='git --no-pager log --graph --oneline --decorate -n 20 {}' \
          --preview-window=down:60%:wrap
  ) || {
    local ret=$?
    if (( in_zle )); then
      BUFFER=$saved_buffer
      CURSOR=$saved_cursor
      zle reset-prompt
    fi
    return $ret
  }

  if [[ $branch == remotes/* ]]; then
    git switch -C "${branch#remotes/*/}" "$branch"
  else
    git switch "$branch"
  fi
}

zle -N gss
bindkey '^g^b' gss

# atuin
command -v atuin > /dev/null 2>&1 && eval "$(atuin init zsh)"
. "$HOME/.atuin/bin/env"

zle -N gify
